 /*
  * generated by Xtext 2.28.0
  */
package br.edu.unijui.gca.jabuti.validation;

import org.eclipse.xtext.validation.Check;
import org.eclipse.emf.common.util.EList;
import com.google.common.base.Objects;

import br.edu.unijui.gca.jabuti.jabuti.*;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;

public class JabutiValidator extends AbstractJabutiValidator {

	public static final String INVALID_NAME = "invalidName";
	public static final String DUPLICATE_NAME = "Duplicated name";

	@Check
	public void checkNameStartsWithCapital(Contract contract) {
		if (!Character.isUpperCase(contract.getName().charAt(0))) {
			warning("Name should start with a capital", JabutiPackage.Literals.CONTRACT__NAME, INVALID_NAME);
		}
	}

	@Check
	public void checkNameStartsWithLowerCase(Clause clause) {
		if (!Character.isLowerCase(clause.getName().charAt(0))) {
			warning("Name should not start with a capital", JabutiPackage.Literals.CLAUSE__NAME, INVALID_NAME);
		}
	}
	
	@Check
	public void checkDate(Contract contract) {
		String beginDate = contract.getBeginDate();
		String dueDate = contract.getDueDate();
		if (beginDate != null) {
			if (!beginDate.matches("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}")) {
				error("DateTime invalid. Provide the format: YYYY-MM-DD HH:mm:ss", JabutiPackage.Literals.CONTRACT__BEGIN_DATE);
			}
		}		
		if (dueDate != null) {
			if (!dueDate.matches("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}")) {
				error("DateTime invalid. Provide the format:  YYYY-MM-DD HH:mm:ss", JabutiPackage.Literals.CONTRACT__DUE_DATE);
			}
		}
	}
	  
    @Check
    public void checkDateOrder(Contract c) {
        if (c.getBeginDate() == null || c.getDueDate() == null) return;

        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            
            LocalDateTime begin = LocalDateTime.parse(c.getBeginDate().replace("\"", ""), formatter);
            LocalDateTime due = LocalDateTime.parse(c.getDueDate().replace("\"", ""), formatter);

            if (begin.isAfter(due) || begin.equals(due)) {
                error("beginDate must be earlier than dueDate",
                      JabutiPackage.Literals.CONTRACT__BEGIN_DATE);
            }
        } catch (Exception e) {
            warning("Invalid date format. Expected format: YYYY-MM-DD HH:mm:ss",
                    JabutiPackage.Literals.CONTRACT__BEGIN_DATE);
        }
    }

	@Check
	public void checkFormatInTimeInterval(TimeInterval time) {				
		String startTime = time.getStart();
		String endTime =  time.getEnd();
		
		if (startTime != null) {
			if(!startTime.matches("\\d{2}:\\d{2}:\\d{2}")) {
					error("Time format invalid. Provide the format: HH:mm:ss", JabutiPackage.Literals.TIME_INTERVAL__START); 
			}	
		}
		if(endTime != null) {
			if(!endTime.matches("\\d{2}:\\d{2}:\\d{2}")) {
				error("Time format invalid. Provide the format: HH:mm:ss", JabutiPackage.Literals.TIME_INTERVAL__END); 
			}
		}
	}
	    
	@Check
	public void checkClauseNameIsUnique(Clause clause) {
		if (clause != null) {
			EList<Clause> clauses = ((Contract) clause.eContainer()).getClauses();
			int count = 0;
			for (Clause otherClause : clauses) {
				if (Objects.equal(otherClause.getName(), clause.getName())) {
					count += 1;
					if (count == 2) {
						error(DUPLICATE_NAME, JabutiPackage.Literals.CLAUSE__NAME);
					}
				}
			}
		}
	}
	
	
	@Check
	public void checkOperationByRole(Clause c) {
	    if (c.getRolePlayer() == null || c.getOperation() == null)
	        return;

	    boolean invalid = false;
	    switch (c.getRolePlayer()) {
	        case APPLICATION:
	            invalid = !(
	                c.getOperation() == Operation.PUSH ||
	                c.getOperation() == Operation.POLL ||
	                c.getOperation() == Operation.REQUEST ||
	                c.getOperation() == Operation.RESPONSE
	            );
	            break;
	        case PROCESS:
	            invalid = !(
	                c.getOperation() == Operation.READ  ||
	                c.getOperation() == Operation.WRITE ||
	                c.getOperation() == Operation.REQUEST ||
	                c.getOperation() == Operation.RESPONSE
	            );
	            break;
	        default:
	            invalid = false;
	            break;
	    }

	    if (invalid) {
	        error(
	            "Operation '" + c.getOperation().getLiteral() + "' is not allowed for " + c.getRolePlayer().getLiteral(),
	            JabutiPackage.Literals.CLAUSE__OPERATION
	        );
	    }
	}


	@Check
	public void checkLogMessage(OnSuccess log) {
	    if (log.getMessage() == null || log.getMessage().trim().isEmpty()) {
	        error(
	            "Log message should not be empty",
	            JabutiPackage.Literals.EVENT_LOG__MESSAGE
	        );
	    }
	}

	@Check
	public void checkLogMessage(OnBreach log) {
	    if (log.getMessage() == null || log.getMessage().trim().isEmpty()) {
	        error(
	            "Log message should not be empty",
	            JabutiPackage.Literals.EVENT_LOG__MESSAGE
	        );
	    }
	}
	
	@Check
	public void checkVariableNameConvention(Variable variable) {
	    String name = variable.getName();
	    if (name != null && !name.isEmpty()) {
	        char firstChar = name.charAt(0);
	        if (Character.isUpperCase(firstChar)) {
	            warning("It is recommended that variable names start with a lowercase letter", 
	                    variable, 
	                    JabutiPackage.Literals.VARIABLE__NAME);
	        }
	    }
	}
	
	@Check
    public void checkUniqueVariableNames(Contract contract) {
        if (contract.getVariables() == null) return;

        Set<String> names = new HashSet<>();
        for (Variable var : contract.getVariables()) {
            if (!names.add(var.getName())) {
                error("Duplicate variable name: '" + var.getName() + "'", var, 
                      JabutiPackage.Literals.VARIABLE__NAME);
            }
        }
    }
	
	@Check
	public void checkTimeoutValue(Timeout timeout) {
	    int seconds = timeout.getSeconds();
	    if (seconds <= 0) {
	        error("Timeout value must be greater than zero", 
	              JabutiPackage.Literals.TIMEOUT__SECONDS);
	    }
	}

 }